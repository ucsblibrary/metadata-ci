#!/usr/bin/env ruby
# frozen_string_literal: true

# flush output immediately
$stdout.sync = true

require "bundler/setup"
require "find"
require "rubygems"
require "trollop"

require File.expand_path("../../lib/check.rb", __FILE__)
require File.expand_path("../../lib/util.rb", __FILE__)

ALL_CHECKS = Dir.glob(
  File.expand_path("../../lib/check/*.rb", __FILE__)
).map do |f|
  next unless /\.rb$/ =~ f
  File.basename(f).sub(/\.rb$/, "").split("_").map(&:capitalize).join
end.freeze

DESCRIPTIONS = ALL_CHECKS.map do |ch|
  begin
    "* #{Util.bold("#{ch}:")} #{Object.const_get("Check::#{ch}").about}"
  rescue NameError
    "* #{Util.bold(ch)}"
  end
end.join("\n  ")

# If there are no options given, invoke help
ARGV << "-h" if ARGV.empty?

options = Trollop.options do
  banner <<~EOS
    Command line interface to metadata-ci validation tools

    Available checks:
      #{DESCRIPTIONS}

    Usage:
      bin/check [options] -f <files>
  EOS

  opt :files, "Metadata files/directories to validate", type: :strings
  opt :with, "Only run the specified checks", type: :strings
  opt :without, "Skip the specified checks", type: :strings
end

if options[:with] && options[:without]
  $stderr.puts "[ERROR] Cannot combine --with and --without"
  exit 1
end

if options[:files].nil?
  $stderr.puts "[ERROR] You must specify files with -f or --files"
  exit 1
end

used_checks = if options[:with]
                ALL_CHECKS & options[:with]
              elsif options[:without]
                ALL_CHECKS - options[:without]
              else
                ALL_CHECKS
              end

if used_checks.empty?
  $stderr.puts <<~EOS
    [ERROR] No valid checks specified.  Allowed checks are
      * #{ALL_CHECKS.join("\n  * ")}
    EOS
  exit 1
end

data = Util.find_paths(options[:files])

$stderr.puts Util.bold("Running checks: #{used_checks.join(", ")}")
$stderr.puts

errors = used_checks.map do |ch|
  begin
    Object.const_get("Check::#{ch}").batch(data)
  rescue NameError => e
    $stderr.puts "[ERROR] Check '#{ch}' undefined or failed to run."
    $stderr.puts "#{e.class}: #{e.message}"
    $stderr.puts e.backtrace
    exit 1
  end
end.flatten.sort_by(&:file)

if errors.empty?
  puts "No errors found!"
  exit 0
end

$stderr.puts(errors.map do |e|
  <<~EOS
    * (#{Util.bold(e.class)}) #{e.file}:
      #{e.problem}

  EOS
end.join(""))

exit 1
